<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<!-- note: code folding is not customizable in ST! indent only... -->
	<!--
	<key>foldingStartMarker</key>
	<string>^\(\*|^\s*\b(?i:(begin))\b|^\s*(generic)\s*(\w+)\s*(\&lt;(.*)\&gt;)\s*=\s*(class)|^\s*\b(\w+)\b\s*=\s*(?i:(class|object|objcclass|objccategory|objcprotocol|interface))\b|^\s*\b(\w+)\b\s*=\s*(class|record|type)+\s+(helper)\s*(\((\w+)\))*\s+(for)\s+(\w+)\s*$|^\s*\b(\w+)\b\s+=\s+(?i:(class|object|objcclass|objccategory|objcprotocol|interface))\b\s*(?i:(external)*\s*)*(?i:(name)*\s*)*('\w+')*\s*(\(.*\))*\s*(\[.*\])*$|^\s*\b(\w+)\b\s+=\s+(?i:(record))\b|^\s*(?i:(case))\s+(\w+)\s+(?i:(of))</string>
	<key>foldingStopMarker</key>
	<string>\b(?i:(end))\b|\*\)</string>
	-->

	<!-- ////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- PATTERNS -->
	<!-- ////////////////////////////////////////////////////////////////////////////////////// -->

	<key>patterns</key>
	<array>
		<!-- line comment -->
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment_todo</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment_link</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment_bookmark</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment_bookmark_separator</string>
				</dict>
			</array>
			<key>begin</key>
			<string>(//)</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>comment.block.pascal.one</string>
		</dict>
		<!-- comment (* *) -->
		<dict>
			<key>begin</key>
			<string>\(\*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*\)</string>
			<key>name</key>
			<string>comment.block.pascal.one</string>
		</dict>
		<!-- comment { } -->
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>comment.block.pascal.two</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#compiler_directive_value</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#compiler_directive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment_todo</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment_link</string>
				</dict>
			</array>
		</dict>
		<!-- goto statement -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\b(?i:goto)\b)\s+(\w+);</string>
			<key>name</key>
			<string>meta.goto.pascal</string>
		</dict>
		<!-- implementation/program scope -->
		<dict>
			<key>begin</key>
			<string>^\s*\b(?i:(implementation|program))\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.section.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\b(?i:(end))\b\.</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.implementation.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<!-- <string>#implementation_scope</string> -->
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<!-- generic record declaration -->
		<dict>
			<key>begin</key>
			<string>^\s*((?i:generic))\s*(\w+)\s*(\&lt;(.*)\&gt;)\s*=\s*((?i:record))</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.record.definition.pascal</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.class.definition.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>string.generic.pascal</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*\b(?i:(end))\b;</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.generic.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#record_scope</string>
				</dict>
			</array>
		</dict>
		<!-- generic object declaration -->
		<dict>
			<key>begin</key>
			<string>^\s*((?i:generic))\s*(\w+)\s*(\&lt;(.*)\&gt;)\s*=\s*((?i:object))\s*(\((.*)\))*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.class.definition.pascal</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.class.definition.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>string.generic.pascal</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>support.class.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*\b(?i:(end))\b;</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.generic.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#record_scope</string>
				</dict>
			</array>
		</dict>
		<!-- generic class declaration -->
		<dict>
			<key>begin</key>
			<string>^\s*((?i:generic))\s*(\w+)\s*(\&lt;(.*)\&gt;)\s*=\s*((?i:class))\s*(\((.*)\))*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.class.definition.pascal</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.class.definition.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>string.generic.pascal</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>support.class.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*\b(?i:(end))\b;</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.generic.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#class_scope</string>
				</dict>
			</array>
		</dict>
		<!-- external objc class declaration -->
		<!-- 
		note: we need a specific grammer for external classes because there is no 
		implementation but we want methods to appear in the menu 
		-->
		<dict>
			<key>begin</key>
			<string>^\s*\b(\w+)\b\s*=\s*(objcclass|objcprotocol|objccategory)+\s+(external)\s*(?i:(name)*\s*)*('\w+')*\s*(\((.*)\))*\s*(\['(.*)'\])*$</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.class.definition.pascal</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.class.definition.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>string.pascal</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>support.class.pascal</string>
				</dict>
				<key>9</key>
				<dict>
					<key>name</key>
					<string>string.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*\b(?i:(end))\b;</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.class.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#external_objcclass_scope</string>
				</dict>
			</array>
		</dict>
		<!-- class/object declaration-->
		<dict>
			<key>begin</key>
			<string>^\s*\b(\w+)\b\s*=\s*(?i:(class|object|objcclass|objccategory|objcprotocol))\b\s*(?i:(external|abstract|sealed)*\s*)*(?i:(name)*\s*)*('\w+')*\s*(\((.*)\))*\s*(\['(.*)'\])*$</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.class.definition.pascal</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.class.definition.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>string.pascal</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>support.class.pascal</string>
				</dict>
				<key>9</key>
				<dict>
					<key>name</key>
					<string>string.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*\b(?i:(end))\b;</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.class.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#class_scope</string>
				</dict>
			</array>
		</dict>
		<!-- interface declaration -->
		<dict>
			<key>begin</key>
			<string>^\s*\b(\w+)\s*=\s*(interface)\s*(\((.*)\))*\s*(\[('.*')\])*$</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.interface.definition.pascal</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.class.definition.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>support.class.pascal</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>string.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*\b(?i:(end))\b;</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.interface.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#class_scope</string>
				</dict>
			</array>
		</dict>
		<!-- helper declaration -->
		<dict>
			<key>begin</key>
			<string>^\s*\b(\w+)\b\s*=\s*(class|record|type)+\s+(helper)\s*(\((\w+)\))*\s*(for)\s+(\w+)\s*$</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.helper.definition.pascal</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.class.helper.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>support.class.pascal</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>support.class.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*\b(?i:(end))\b;</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.helper.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#class_scope</string>
				</dict>
			</array>
		</dict>
		<!-- record declaration -->
		<dict>
			<key>begin</key>
			<string>^\s*(\w+)\s*=\s*(?i:(bitpacked)\s+)*(?i:(record))</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.record.definition.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Record declaration</string>
			<key>end</key>
			<string>^\s*\b(?i:(end))\b;</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.record.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#record_scope</string>
				</dict>
			</array>
		</dict>
		<!-- const set -->
		<dict>
			<key>begin</key>
			<string>^\s*\b(\w+)\b\s*=\s*\[</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.definition.pascal</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.scope.const.enum.pascal</string>
			<key>end</key>
			<string>\];</string>
			<key>name</key>
			<string>meta.constant.enum.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<!-- const ordinal -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.definition.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.ordinal.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*\b(\w+)\b\s*=\s*([0-9\-.]+);</string>
			<key>name</key>
			<string>meta.constant.ordinal.definition.pascal</string>
		</dict>
		<!-- const hex -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.definition.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.ordinal.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*\b(\w+)\b\s*=\s*(\$[A-Z0-9\-$.]+);</string>
			<key>name</key>
			<string>meta.constant.ordinal.definition.pascal</string>
		</dict>
		<!-- const boolean -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.definition.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.language.value.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*\b(\w+)\b\s*=\s*(?i:(true|false));</string>
			<key>name</key>
			<string>meta.constant.boolean.definition.pascal</string>
		</dict>
		<!-- const string -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.definition.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>string.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*\b(\w+)\b\s*=\s*('.*');</string>
			<key>name</key>
			<string>meta.constant.string.definition.pascal</string>
		</dict>
		<!-- enum type -->
		<dict>
			<key>begin</key>
			<string>^\s*\b(\w+)\b\s*=\s*\(</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.pascal</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.scope.type.definition.pascal</string>
			<key>end</key>
			<string>\);</string>
			<key>name</key>
			<string>meta.type.definition.enum.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type_enum_list</string>
				</dict>
			</array>
		</dict>
		<!-- generic parameter -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>&lt;([a-zA-Z0-9, ]+)&gt;</string>
			<key>name</key>
			<string>meta.generic.parameter.pascal</string>
		</dict>
		<!-- generic parameter -->
		<!-- <dict>
			<key>begin</key>
			<string>&lt;</string>
			<key>end</key>
			<string>&gt;</string>
			<key>name</key>
			<string>meta.scope.generic-parameter.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_enum_list</string>
				</dict>
			</array>
		</dict> -->
		<!-- forward declaration -->
		<!-- note: we separate forward declarations from types
		so we can distinquish between them in the indexed symbol list -->
		<dict>
			<key>match</key>
			<string>^\s*(\w+)\s*=\s*(objcclass|objcprotocol|objccategory|class)+\s*(external)*\s*(name\s*('\w+'))*\s*;</string>
			<key>name</key>
			<string>meta.type.definition.forward.pascal</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.forward.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>string.pascal</string>
				</dict>
			</dict>
		</dict>
		<!-- type scope -->
		<dict>
			<key>begin</key>
			<string>^\s*\b(\w+)\b\s*=</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.pascal</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.scope.type.definition.pascal</string>
			<key>end</key>
			<string>;</string>
			<key>name</key>
			<string>meta.type.definition.any.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_scope</string>
				</dict>
			</array>
		</dict>
		<!-- method declaration -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>support.class.pascal</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.pascal</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*\b(?i:(class)*)\b\s*\b(?i:(function|procedure|constructor|destructor))\b\s+(\w+)(\.)(\w+)</string>
			<key>name</key>
			<string>meta.method.implemented.pascal</string>
		</dict>
		<!-- function declaration -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.name.function.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*\b(?i:(function|procedure))\b\s+(\w+)</string>
			<key>name</key>
			<string>meta.function.declared.pascal</string>
		</dict>
		<!-- generic function declaration -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.name.function.pascal</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(generic)\s+(function|procedure)+\s+([a-zA-Z0-9._]+)\s*&lt;(.*)&gt;</string>
			<key>name</key>
			<string>meta.function.declared.pascal</string>
		</dict>
		<!-- class operator declaration -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>support.class.pascal</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(?i:(class))\s+(?i:(operator))\s+(\w+)\s*\.\s*(?i:(explicit|implicit|initialize|finalize|copy|move|addref|in|:=|\+|\*|\-|&gt;|&lt;|=|\*\*|&lt;=|&gt;=|>&lt;|div|mod|and|or|xor|shl|shr|not|/))+</string>
			<key>name</key>
			<string>meta.class-operator.implemented.pascal</string>
		</dict>
		<!-- operator declaration -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.class.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(?i:(operator))\s+(?i:(explicit|implicit|initialize|finalize|copy|move|addref|in|:=|\+|\*|\-|&gt;|&lt;|=|\*\*|&lt;=|&gt;=|>&lt;|div|mod|and|or|xor|shl|shr|not|/))+</string>
			<key>name</key>
			<string>meta.operator.declared.pascal</string>
		</dict>
		<!-- method pointer -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.class.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>@(\w+)\.(\w+)</string>
			<key>name</key>
			<string>meta.method.pointer.pascal</string>
		</dict>
		<!-- begin/end scope -->
		<dict>
			<key>begin</key>
			<string>^\s*\b(?i:begin)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*\b(?i:end)\b</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.begin.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#begin_end_scope</string>
				</dict>
			</array>
		</dict>
		<!-- keywords -->
		<dict>
			<key>match</key>
			<string>\b(?i:(fixed|constructor|destructor|property|function|procedure|class|object|shl|shr|strict|bitpacked|continue|is|as|break|read|implements|library|real|ansistring|widestring|unicodestring|resourcestring|ansichar|widechar|unicodechar|single|double|pchar|try|finally|except|on|exception|exports|dispose|univ|exit|halt|char|pointer|new|sizeof|forward|uses|const|constref|cycle|var|threadvar|class|object|record|type|implementation|interface|begin|end|integer|boolean|bytebool|wordbool||longbool|objcbool|longint|byte|shortint|smallint|word|cardinal|longword|int64|qword|variant|and|array|case|div|do|downto|else|file|for|goto|if|in|inherited|label|leave|mod|not|of|or|xor|otherwise|packed|program|public|private|protected|published|repeat|raise|set|string|then|to|until|unit|while|with|absolute|sealed|generic|specialize|out|reference|nested|initialization|finalization))\b</string>
			<key>name</key>
			<string>keyword.control.pascal</string>
		</dict>
		<!-- custom keywords -->
		<dict>
			<key>match</key>
			<string>\b(?i:(float))\b</string>
			<key>name</key>
			<string>keyword.control.pascal</string>
		</dict>
		<!-- function intrinsics -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>compiler intrinsics</string>
			<key>match</key>
			<string>\b(?i:(setlength|length|high|low|assigned|writeln|write|trunc|new))\b</string>
			<key>name</key>
			<string>keyword.common.function.pascal</string>
		</dict>
		<!-- constant ordinal -->
		<dict>
			<key>match</key>
			<string>\b(?i:(true|false|nil))\b</string>
			<key>name</key>
			<string>constant.language.pascal</string>
		</dict>
		<!-- address operator -->
		<dict>
			<key>match</key>
			<string>@</string>
			<key>name</key>
			<string>constant.language.pascal</string>
		</dict>
		<!-- $address -->
		<dict>
			<key>match</key>
			<string>\$\w+</string>
			<key>name</key>
			<string>constant.ordinal.address</string>
		</dict>
		<!-- #ascii code -->
		<dict>
			<key>match</key>
			<string>#\d+</string>
			<key>name</key>
			<string>constant.ordinal.ascii</string>
		</dict>
		<!-- objective pascal keywords -->
		<dict>
			<key>match</key>
			<string>\b(?i:(objcclass|objccategory|objcprotocol|objcselector|optional|required))\b</string>
			<key>name</key>
			<string>keyword.other.objective-pascal</string>
		</dict>
		<!-- function modifiers -->
		<dict>
			<key>match</key>
			<string>\b(?i:(deprecated|overload|inline|static|external|virtual|abstract|alias|cdecl|cvar|export|pascal|mwpascal|override|final|default|varargs|message|reintroduce|assembler|enumerator))\b</string>
			<key>name</key>
			<string>keyword.modifiers.pascal</string>
		</dict>
		<!-- constant hex/real -->
		<dict>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b</string>
			<key>name</key>
			<string>constant.ordinal.pascal</string>
		</dict>
		<!-- string double-quote -->
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.pascal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Double quoted strings are an extension and (generally) support C-style escape sequences.</string>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.pascal</string>
				</dict>
			</array>
		</dict>
		<!-- string single-quote -->
		<dict>
			<key>applyEndPatternLast</key>
			<integer>1</integer>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>''</string>
					<key>name</key>
					<string>constant.character.escape.apostrophe.pascal</string>
				</dict>
			</array>
		</dict>
		<!-- string multi-line (backticks) -->
		<dict>
			<key>applyEndPatternLast</key>
			<integer>1</integer>
			<key>begin</key>
			<string>`</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>`</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.backtick.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>``</string>
					<key>name</key>
					<string>constant.character.escape.backtick.pascal</string>
				</dict>
			</array>
		</dict>
	</array>

	<!-- ////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- REPOSITORY -->
	<!-- ////////////////////////////////////////////////////////////////////////////////////// -->

	<key>repository</key>
	<dict>
		<key>begin_scope_keywords</key>
		<dict>
			<key>match</key>
			<string>\b(?i:(result|self))\b</string>
			<key>name</key>
			<string>keyword.control.pascal</string>
		</dict>
		<key>nested_php_block</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>source.php</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nested_php_block</string>
				</dict>
			</array>
		</dict>
		<key>begin_end_block</key>
		<dict>
			<key>begin</key>
			<string>^\s*\b(?i:(begin|case|try))\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*\b(?i:end)\b</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.begin.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#begin_end_scope</string>
				</dict>
			</array>
		</dict>
		<key>begin_end_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function_called</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_called</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#begin_end_block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#begin_scope_keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>class_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#property_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_class_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#record_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>external_objcclass_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#external_objcclass_method_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#external_objcclass_method_class_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#record_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>comment_todo</key>
		<dict>
			<key>match</key>
			<string>(\b(?i:note|todo|important|warning|fixme)\b)\s*(\(\w+\))*:</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>comment.pascal</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.todo.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.comment.todo.pascal</string>
		</dict>
		<key>comment_link</key>
		<dict>
			<key>match</key>
			<string>(http(s)*://[^ ]+)</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>comment.url.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.comment.url.pascal</string>
		</dict>
		<key>comment_bookmark</key>
		<dict>
			<key>match</key>
			<string>(\$bookmark)\s+([\w\s]+)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.macro.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>comment.bookmark.name.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.comment.bookmark.pascal</string>
		</dict>
		<key>comment_bookmark_separator</key>
		<dict>
			<key>match</key>
			<string>(\$bookmark)\s+([-]+)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.macro.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>comment.bookmark.name.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.comment.bookmark.separator.pascal</string>
		</dict>
		<key>compiler_directive</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.macro.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\$\w+)</string>
			<key>name</key>
			<string>meta.comment.macro.pascal</string>
		</dict>
		<key>compiler_directive_value</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.macro.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>comment.macro.value.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\$\w+)\s+([^}]+)</string>
			<key>name</key>
			<string>meta.comment.macro.pascal</string>
		</dict>
		<key>type_enum</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>comment.macro.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>comment.macro.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.enum.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict> 
		<key>function_call_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function_called</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_called</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>method_class_declared</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(?i:(class))\s*\b(?i:(function|procedure|constructor|destructor))\b\s+(\w+)</string>
			<key>name</key>
			<string>meta.method.declared.pascal</string>
		</dict>
		<key>method_declared</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(?i:(function|procedure|constructor|destructor))\b\s+(\w+)</string>
			<key>name</key>
			<string>meta.method.declared.pascal</string>
		</dict>
		<key>external_objcclass_method_class_declared</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(?i:(class))\s*\b(?i:(function|procedure|constructor|destructor))\b\s+(\w+)</string>
			<key>name</key>
			<string>meta.method.external.declared.pascal</string>
		</dict>
		<key>external_objcclass_method_declared</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(?i:(function|procedure|constructor|destructor))\b\s+(\w+)</string>
			<key>name</key>
			<string>meta.method.external.declared.pascal</string>
		</dict>
		<key>class_operator_declared</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(?i:(class))\s+(?i:(operator))\s+(?i:(explicit|implicit|initialize|finalize|copy|move|addref|in|:=|\+|\*|\-|&gt;|&lt;|=|\*\*|&lt;=|&gt;=|>&lt;|div|mod|and|or|xor|shl|shr|not|/))+</string>
			<key>name</key>
			<string>meta.class-operator.declared.pascal</string>
		</dict>
		<key>property_declared</key>
		<dict>
			<key>begin</key>
			<string>^\s*(?i:(property)+)\s+(\w+)\s*:\s*</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>;</string>
			<key>name</key>
			<string>meta.property.declared.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>record_declared</key>
		<dict>
			<key>begin</key>
			<string>^\s*(\w+)\s*:\s*(?i:(bitpacked)\s+)*(?i:(record))</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.record.definition.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.scope.record.pascal</string>
			<key>end</key>
			<string>^\s*\b(?i:(end))\b;</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.record.instance.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#record_scope</string>
				</dict>
			</array>
		</dict>
		<key>record_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#method_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_class_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class_operator_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#property_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<!-- items in enum list (a,b,c) -->
		<key>type_enum_list</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.definition.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(\w+)\b</string>
			<key>name</key>
			<string>meta.type.definition.enum.pascal</string>
		</dict>
		<!-- universal type scopes -->
		<key>type_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
	</dict>

	<!-- /////////////////////////////////////////// -->
	<!-- FILE INFO -->
	<!-- /////////////////////////////////////////// -->

	<key>fileTypes</key>
	<array>
		<string>pas</string>
		<string>p</string>
		<string>inc</string>
		<string>pp</string>
	</array>
	<key>name</key>
	<string>FPC</string>
	<key>scopeName</key>
	<string>source.pascal</string>
	<key>uuid</key>
	<string>9877ED1A-06A3-498F-8071-DB147033A6D0</string>
</dict>
</plist>